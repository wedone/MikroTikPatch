name: Sync Upstream Releases

on:
  # 手动触发
  workflow_dispatch:

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout own repo
        uses: actions/checkout@v4

      - name: Sync Releases from Upstream
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const { owner: upstreamOwner, repo: upstreamRepo } = context.repo; // 默认假设同仓库名，建议使用secret
            // 从secret获取上游仓库，若未设置则默认使用 'elseif/MikroTikPatch'
            const upstreamRepoFull = '${{ secrets.UPSTREAM_REPO || 'elseif/MikroTikPatch' }}';
            const [upstreamOwnerActual, upstreamRepoActual] = upstreamRepoFull.split('/');

            // 1. 获取上游仓库的releases列表
            const upstreamReleases = await github.rest.repos.listReleases({
                owner: upstreamOwnerActual,
                repo: upstreamRepoActual,
            });

            // 2. 获取自己仓库的releases列表 (用于比较)
            const myReleases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
            });

            // 简单的基于tag_name的匹配Set，用于判断上游release是否已存在
            const myReleaseTagNames = new Set(myReleases.data.map(release => release.tag_name));

            // 3. 遍历上游releases
            for (const upstreamRelease of upstreamReleases.data) {
                // 检查是否已存在此tag的release
                if (myReleaseTagNames.has(upstreamRelease.tag_name)) {
                    console.log(`Release ${upstreamRelease.tag_name} already exists in this repo. Skipping.`);
                    continue;
                }

                console.log(`Processing upstream release: ${upstreamRelease.tag_name}`);

                // 4. 在自己的仓库创建对应的release（草稿或发布状态，此处设为草稿以便检查）
                let newRelease;
                try {
                    newRelease = await github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: upstreamRelease.tag_name,
                        name: upstreamRelease.name || `Synced: ${upstreamRelease.tag_name}`,
                        body: `This release was automatically synced from ${upstreamRepoFull}.\n\n---\n\nOriginal description:\n\n${upstreamRelease.body || 'No description provided.'}`,
                        draft: true, // 先创建为草稿，手动检查后发布
                        prerelease: upstreamRelease.prerelease,
                        // target_commitish: 如果需要关联特定提交，可能需要额外逻辑
                    });
                    console.log(`Draft release created for tag ${upstreamRelease.tag_name}`);
                } catch (createError) {
                    console.error(`Failed to create draft release for tag ${upstreamRelease.tag_name}:`, createError);
                    continue; // 跳过这个release的处理
                }

                // 5. 下载并重新上传每个资产 (asset)
                const assets = upstreamRelease.assets || [];
                for (const asset of assets) {
                    console.log(`Processing asset: ${asset.name}`);
                    try {
                        // 下载资产
                        const downloadResponse = await fetch(asset.browser_download_url);
                        if (!downloadResponse.ok) {
                            throw new Error(`Failed to download asset: ${downloadResponse.status} ${downloadResponse.statusText}`);
                        }
                        const assetBuffer = Buffer.from(await downloadResponse.arrayBuffer());

                        // 上传资产到新创建的release
                        await github.rest.repos.uploadReleaseAsset({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            release_id: newRelease.data.id,
                            name: asset.name,
                            data: assetBuffer, // GitHub Actions 的 github-script v6+ 支持 data 属性
                            headers: {
                                'content-type': asset.content_type || 'application/octet-stream',
                                'content-length': asset.size
                            },
                        });
                        console.log(`Asset ${asset.name} uploaded successfully.`);
                    } catch (assetError) {
                        console.error(`Error processing asset ${asset.name}:`, assetError);
                    }
                }

                // 可选：在这里自动发布release，如果你有信心完全自动化
                // await github.rest.repos.updateRelease({ owner: context.repo.owner, repo: context.repo.repo, release_id: newRelease.data.id, draft: false });

                console.log(`Finished processing release ${upstreamRelease.tag_name}`);
            }
            console.log('Sync process completed.');
