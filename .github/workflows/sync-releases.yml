name: Sync Upstream Releases
on:
  schedule:
    - cron: "0 0 * * *"  # 每天 UTC 0 点运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout fork repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Configure GitHub CLI
        run: gh auth setup-git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync RouterOS 6 releases
        run: |
          UPSTREAM="elseif/MikroTikPatch"
          FORK="${{ github.repository }}"
          
          # 获取上游所有releases
          gh release list -R $UPSTREAM --limit 100 | while read -r tag rest; do
            # 过滤RouterOS 6版本标签 (格式如6.49.19)
            if [[ $tag =~ ^6\.[0-9]+\.[0-9]+$ ]]; then
              # 检查当前仓库是否已存在该tag
              if ! gh release view $tag -R $FORK > /dev/null 2>&1; then
                echo "Syncing release $tag from upstream..."
                
                # 创建临时目录
                mkdir -p /tmp/releases
                cd /tmp/releases
                
                # 下载上游release资产
                gh release download $tag -R $UPSTREAM
                
                # 创建本地tag
                git tag $tag
                git push origin $tag
                
                # 创建release并上传资产
                gh release create $tag ./* \
                  --title "RouterOS $tag" \
                  --notes "$(gh release view $tag -R $UPSTREAM --json body -q .body)" \
                  --prerelease false
                
                cd -
                rm -rf /tmp/releases
              else
                echo "Release $tag already exists, skipping..."
              fi
            fi
          done

      - name: Sync RouterOS 7 releases
        run: |
          UPSTREAM="elseif/MikroTikPatch"
          FORK="${{ github.repository }}"
          
          # 获取上游所有releases
          gh release list -R $UPSTREAM --limit 100 | while read -r tag rest; do
            # 过滤RouterOS 7版本标签 (格式如7.19.2、7.19.2-arm64等)
            if [[ $tag =~ ^7\.[0-9]+\.[0-9]+(-arm64|-arm)?$ ]]; then
              # 检查当前仓库是否已存在该tag
              if ! gh release view $tag -R $FORK > /dev/null 2>&1; then
                echo "Syncing release $tag from upstream..."
                
                # 创建临时目录
                mkdir -p /tmp/releases
                cd /tmp/releases
                
                # 下载上游release资产
                gh release download $tag -R $UPSTREAM
                
                # 创建本地tag
                git tag $tag
                git push origin $tag
                
                # 创建release并上传资产
                gh release create $tag ./* \
                  --title "RouterOS $tag" \
                  --notes "$(gh release view $tag -R $UPSTREAM --json body -q .body)" \
                  --prerelease $([[ $rest == *"prerelease"* ]] && echo "true" || echo "false")
                
                cd -
                rm -rf /tmp/releases
              else
                echo "Release $tag already exists, skipping..."
              fi
            fi
          done
