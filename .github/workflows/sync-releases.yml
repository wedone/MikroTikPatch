name: Manual Sync Releases
on:
  workflow_dispatch:  # 仅允许手动触发，移除定时任务

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需创建Releases和上传资产的权限
    env:
      GH_TOKEN: ${{ github.token }}
      UPSTREAM_REPO: "elseif/MikroTikPatch"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取完整历史

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Get upstream releases info
        id: upstream-releases
        run: |
          # 获取上游所有Releases的标签
          gh api repos/$UPSTREAM_REPO/releases --jq '.[] | .tag_name' > upstream_tags.txt
          echo "Found $(wc -l < upstream_tags.txt) releases in upstream"

      - name: Sync each release
        run: |
          while read -r tag; do
            echo "Processing release: $tag"
            
            # 检查目标仓库是否已存在该Release
            if ! gh release view "$tag" >/dev/null 2>&1; then
              echo "Starting sync for release: $tag"
              
              # 创建临时目录
              mkdir -p /tmp/release_assets
              cd /tmp/release_assets
              
              # 1. 下载上游Release的所有资产文件
              gh release download "$tag" -R "$UPSTREAM_REPO"
              
              # 2. 获取上游Release的元数据
              title=$(gh release view "$tag" -R "$UPSTREAM_REPO" --json name -q .name)
              body=$(gh release view "$tag" -R "$UPSTREAM_REPO" --json body -q .body)
              prerelease=$(gh release view "$tag" -R "$UPSTREAM_REPO" --json isPrerelease -q .isPrerelease)
              
              # 3. 在当前仓库创建完整Release
              gh release create "$tag" ./* \
                --title "$title" \
                --notes "$body" \
                --prerelease "$prerelease"
              
              # 清理临时文件
              cd -
              rm -rf /tmp/release_assets
              echo "Successfully synced release: $tag"
            else
              echo "Release $tag already exists, skipping"
            fi
          done < upstream_tags.txt
